// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  auditLogs AuditLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  deltaValue  Int       @default(1) // Bulk update step size (e.g., +5)
  items       Item[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String
  description String?    // Added: Optional description
  maxQuantity Int       // Added: Maximum quantity allowed
  count       Int        @default(0)
  version     Int        @default(0) // Optimistic concurrency control
  section     Section    @relation(fields: [sectionId], references: [id],onDelete: Cascade)
  sectionId   Int
  auditLogs   AuditLog[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([sectionId])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  oldCount   Int
  newCount   Int
  remarks    String?  // This field can be updated later by the logged-in user.
  timestamp  DateTime @default(now())
  
  @@index([itemId])
  @@index([userId])
}
